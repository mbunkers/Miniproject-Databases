/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package View;

import Controller.DataLayer;
import Model.Gedachte;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.AdjustmentEvent;
import java.awt.event.AdjustmentListener;
import java.util.ArrayList;
import java.util.Observable;
import java.util.Observer;
import java.util.Random;
import javax.swing.JButton;
import javax.swing.JDialog;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JPanel;
import javax.swing.JPasswordField;
import javax.swing.JScrollBar;
import javax.swing.JScrollPane;
import javax.swing.JTextField;
import javax.swing.ScrollPaneConstants;

/**
 *
 * @author Marc Bunkers, Fabian Claasen
 */
public class MainScreen extends JFrame implements ActionListener, Observer {

    private JScrollBar scroll;
    private JPanel gedachten, projecten, gedachte1, gedachte2, gedachte3;
    private Kalenderscreen kalender;
    private Gedachte gedachte;
    private int teller = 0;
    private ArrayList projects;
    private Random random = new Random();
    private Menubalk menu;
    private boolean ingelogd = false;
    private int height = 520;
    private int width = 780;

    public MainScreen() {
        setTitle("MiniProject Databases & Java");
        setDefaultCloseOperation(EXIT_ON_CLOSE);
        menu = new Menubalk();
        setJMenuBar(menu);
        setPreferredSize(new Dimension(800, 600));
        pack();
        
        setLocationRelativeTo(null);
        setDefaultCloseOperation(EXIT_ON_CLOSE);
        setVisible(true);
        
        startConnectie();
        init();
    }

    public void init() {
        gedachte = new Gedachte();
        projects = new ArrayList<Projectscreen>();
        createPanels();
    }

    private void createPanels() {
        setLayout(new BorderLayout());

        // Google Calender panel
        //kalender = new Kalenderscreen();
        //add(kalender, BorderLayout.EAST);
        //int kalenderWidth = 200;
        //int kalenderHeight = 600;
        //kalender.setSize(200, 600);
        //kalender.setBounds(0, 0, kalenderWidth, kalenderHeight);
        //kalender.setBackground(Color.WHITE);

        // Gedachten scherm
        gedachten = new JPanel();
        add(gedachten, BorderLayout.CENTER);
        //gedachten.setBounds(0, 0, 800, 600);
        gedachten.setPreferredSize(new Dimension(width ,height));
        gedachten.setBackground(Color.BLUE);
        gedachten.setLayout(new GridLayout(1, 3));

        projecten = new JPanel(new BorderLayout());
        projecten.add(gedachten, BorderLayout.CENTER);
        add(projecten);

        // schermen daarin
        gedachten.add(addProject(1));
        
        ArrayList arraylist = DataLayer.getProjects();
        
        for (Object test : arraylist){
            String p = (String) test;
            String[] split = p.split(" ");
            
            Projectscreen project = new Projectscreen(split[1], Integer.parseInt(split[0]));
            gedachten.add(project);
            projects.add(project);
        }
        
        if (projects.size() == 2){
            gedachten.add(addProject(2));
        }
        
        if (projects.size() == 1){
            gedachten.add(addProject(2));
            gedachten.add(addProject(2));
        }

        scroll = new JScrollBar(JScrollBar.HORIZONTAL);
        scroll.setEnabled(false);
        scroll.addAdjustmentListener(new AdjustmentListener() {

            @Override
            public void adjustmentValueChanged(AdjustmentEvent ae) {
                throw new UnsupportedOperationException("Not supported yet.");
            }
        });
        
        add(scroll);
        if (projects.size() > 3){
            scroll.setEnabled(true);
        }
        add(projecten);
        projecten.add(scroll, BorderLayout.SOUTH);
        validate();
    }

    public void updateThoughts()
    {
        Projectscreen project = (Projectscreen) projects.get(0);
        project.updateThoughts();
    }
    
    public void updateScreen() {

        validate();
    }
    
    private Projectscreen addProject(int id, String name)
    {
        Projectscreen project = new Projectscreen(name, id);
        projects.add(project);
        if (projects.size() > 3){
            scroll.setEnabled(true);
        }
        return project;
    }

    private Projectscreen addProject(int i) {
        Projectscreen project = null;
        if (i == 1) {
            project = new Projectscreen("Gedachten");
            project.updateThoughts();
            projects.add(project);
        }

        if (i == 2) {
            project = new Projectscreen("Untitled Project");
        }
        return project;
    }

    private void create() {
        scroll = new JScrollBar();
        scroll.setLayout(new FlowLayout());

        gedachte1 = new JPanel();
        gedachte1.setPreferredSize(new Dimension(150, 600));
        gedachte2 = new JPanel();
        gedachte2.setPreferredSize(new Dimension(150, 600));
        gedachte3 = new JPanel();
        gedachte3.setPreferredSize(new Dimension(150, 600));
        //kalender = new JPanel();
        //kalender.setPreferredSize(new Dimension(150, 600));

        scroll.add(gedachte1);
        scroll.add(gedachte2);
        scroll.add(gedachte3);
    }

    private void maakGedachte() {
        while (gedachte.hasNext()) {
            if (teller <= 0) {
                if (gedachte.getGedachte().equals("")) {
                } else {
                    JButton button = new JButton(gedachte.getGedachte());
                    button.addActionListener(this);
                    gedachte1.add(button);
                    teller = 1;
                }
            }

            if (teller == 1) {
                if (gedachte.getGedachte().equals("")) {
                } else {
                    JButton button = new JButton(gedachte.getGedachte());
                    button.addActionListener(this);
                    gedachte2.add(button);
                    teller++;
                }
            }
            if (teller >= 2) {
                if (gedachte.getGedachte().equals("")) {
                } else {
                    JButton button = new JButton(gedachte.getGedachte());
                    button.addActionListener(this);
                    gedachte3.add(button);
                    teller = 0;
                }
            }
        }
    }
    
    public void startConnectie()
    {
        final JDialog inlog = new JDialog(this, "Inloggen", true);
        inlog.setBounds(0, 0, 200, 150);
        
        JPanel panel = new JPanel();
        JPanel labels = new JPanel();
        JPanel txtfields = new JPanel();
        JButton commit = new JButton("Log in");
        
        panel.setLayout(new BorderLayout());
        labels.setLayout(new GridLayout(2, 0));
        txtfields.setLayout(new GridLayout(2, 0));
        
        final JLabel name = new JLabel("Username");
        final JLabel pssword = new JLabel("Password");
        final JTextField username = new JTextField("miniproject7"); // voor ontwikkel en test doeleinde is dit ingevuld
        final JPasswordField password = new JPasswordField("Pp3jWFQH"); // voor ontwikkel en test doeleinde is dit ingevuld
        
        inlog.add(panel);
        panel.add(labels, BorderLayout.WEST);
        panel.add(txtfields, BorderLayout.CENTER);
        panel.add(commit, BorderLayout.SOUTH);
        
        labels.add(name);
        labels.add(pssword);
        txtfields.add(username, BorderLayout.CENTER);
        txtfields.add(password, BorderLayout.CENTER);
        username.setBounds(50, 10, 200, 20);
        password.setBounds(50, 10, 200, 20);
        commit.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent ae) {
                
                if (!DataLayer.init(username.getText(), password.getText())) {
                    ingelogd = false;
                    username.setText("");
                    name.setForeground(Color.RED);
                    password.setText("");
                    pssword.setForeground(Color.RED);
                } else {
                    ingelogd = true;
                    inlog.setVisible(false);
                }
            }
        });
        
        inlog.pack();
        inlog.setDefaultCloseOperation(DO_NOTHING_ON_CLOSE);
        inlog.setLocationRelativeTo(null);
        inlog.setResizable(false);
        inlog.setVisible(true);
    }
    
    public void logOff()
    {
        ingelogd = false;
        startConnectie();
    }
    
    public void quit()
    {
        ingelogd = false;
        System.exit(0);
    }
    
    public void updateMain()
    {
        updateScreen();
    }

    @Override
    public void actionPerformed(ActionEvent e) {
        /*JDialog dialog = new JDialog();
         dialog.setBounds(0, 0, 300, 500);
        
         dialog.add(new EditScreen());
         dialog.setVisible(true);*/
    }

    @Override
    public void update(Observable o, Object o1) {
        throw new UnsupportedOperationException("Not supported yet.");
    }

    public int getCurrentThought() {
        Projectscreen project = (Projectscreen) projects.get(0);
        return project.getHuidigeSelectie();
    }
}
